"""
Django settings for a_core project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import hvac
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG")

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")


# Application definition

INSTALLED_APPS = [
	'daphne',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'django_cleanup.apps.CleanupConfig',
	'django.contrib.sites',

	# django-otp & django_rest_framework :

	'rest_framework',
	'rest_framework_simplejwt',

	'two_factor',
	'django_otp',
	'django_otp.plugins.otp_static',
	'django_otp.plugins.otp_totp',

	'allauth',
	'allauth.account',
	'allauth.socialaccount',

	'a_home',
	'a_users',
	'a_rtchat'
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	"allauth.account.middleware.AccountMiddleware",

	'django_otp.middleware.OTPMiddleware',
]

ROOT_URLCONF = 'a_core.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [ BASE_DIR / 'templates' ],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

#WSGI_APPLICATION = 'a_core.wsgi.application'
ASGI_APPLICATION = 'a_core.asgi.application'

CSRF_TRUSTED_ORIGINS = ['https://127.0.0.1', 'https://localhost']

CHANNEL_LAYERS = {
	'default': {
		"BACKEND": "channels.layers.InMemoryChannelLayer",
	}
}
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("localhost", 6379)],
#         },
#     },
# }

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# Need to get secrets from Vault first

import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

vault_client = hvac.Client(url=os.environ.get("VAULT_ADDR"), cert=(os.environ.get("VAULT_TLS_CERT"), os.environ.get("VAULT_TLS_KEY")), verify=False)

vault_role_id = os.environ.get("VAULT_ROLE_ID")
vault_secret_id = os.environ.get("VAULT_SECRET_ID")

vault_auth_response = vault_client.auth.approle.login(role_id=vault_role_id, secret_id=vault_secret_id)
vault_client.token = vault_auth_response['auth']['client_token']

postgres_user = vault_client.secrets.kv.read_secret_version(path='POSTGRES_USER', mount_point='kv')['data']['data']['value']
postgres_password = vault_client.secrets.kv.read_secret_version(path='POSTGRES_PASSWORD', mount_point='kv')['data']['data']['value']

DATABASES = {
    'default': {
        "ENGINE": os.environ.get("DJANGO_DB_ENGINE"),
        "NAME": os.environ.get("POSTGRES_DB"),
        "USER": postgres_user,
        "PASSWORD": postgres_password,
        "HOST": os.environ.get("POSTGRES_HOST"),
        "PORT": os.environ.get("POSTGRES_PORT"),
    }
}

# redis
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://redis:6379/1',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'jwt_exchange'
LOGOUT_REDIRECT_URL = 'user_logout'
TWO_FACTOR_LOGIN_REDIRECT_URL = 'jwt_exchange'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_FINDERS = (
'django.contrib.staticfiles.finders.FileSystemFinder',
'django.contrib.staticfiles.finders.AppDirectoriesFinder'
)
STATIC_ROOT = '/usr/src/app/staticfiles/'
STATIC_URL = '/static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = '/usr/src/app/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
ACCOUNT_AUTHENTIFICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True

LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'filters': {
		'require_debug_true': {
			'()': 'django.utils.log.RequireDebugTrue',
		},
	},
	'handlers': {
		'console': {
			'class': 'logging.StreamHandler',
			'filters': ['require_debug_true'],
		},
	},
	'loggers': {
		'mylogger': {
			'handlers': ['console'],
			'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
			'propagate': True,
		},
	},
}